scalar StringOrInt

input PostInput {
  title: String!
  content: String!
}

input UpdatePost {
  title: String!
  content: String!
}

input LoginParams {
  username: String!
  password: String!
}

input CreateUser {
  name: String!
  email: String!
  username: String!
  password: String!
}

input UpdateUser {
  name: String
  username: String
}

type User {
  id: Int
  name: String
  username: String
  email: String
}

type Post {
  id: Int
  title: String
  content: String
  createdAt: String
  updatedAt: String
}

type Result {
  error: String
  data: Post
}

type UserResult {
  error: String
  data: User
}

type Book {
  title: String
  author: String
  published: String!
}

type Query {
  hello: String
  post(id: Int!): Result!
  posts: [Post]!
  userById(id: Int!): UserResult!
  me: User
  userByEmailOrUsername(input: String!): UserResult!
  users: [User]!
}

type Mutation {
  createPost(input: PostInput!): Result!
  deletePost(id: Int!): Boolean!
  updatePost(id: Int!, input: UpdatePost!): Result!
  createUser(input: CreateUser!): UserResult!
  deleteUser(id: Int!): Boolean!
  updateUser(updateRef: StringOrInt, input: UpdateUser!): UserResult!
  login(input: LoginParams!): UserResult!
}
